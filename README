# Laravel 12 Docker Setup

This repository contains a Docker setup for Laravel 12 projects, following best practices for development and production environments.

## Directory Structure

Before using this setup, create the following directory structure:

```
project-root/
│
├── docker/
│   ├── mysql/
│   │   └── my.cnf
│   ├── nginx/
│   │   ├── conf.d/
│   │   │   └── app.conf
│   │   └── ssl/ (for SSL certificates)
│   └── php/
│       └── local.ini
│
├── .env
├── docker-compose.yml
├── Dockerfile
└── Makefile
```

## Setup Instructions
docker-compose exec app bash

cd /tmp

# Create a fresh temporary directory with a unique name
mkdir laravel_temp_install

# Go to the temporary directory
cd laravel_temp_install

# Use Composer directly instead of the Laravel installer
composer create-project laravel/laravel . "^12.0"

# Once installation is complete, copy files to your project directory
# First verify what files are in your current working directory
ls -la /var/www/html

# Copy Docker configurations to a backup location
mkdir -p /tmp/docker_backup
cp -a /var/www/html/docker /var/www/html/docker-compose.yml /var/www/html/Dockerfile /var/www/html/Makefile /tmp/docker_backup/

# Now copy all Laravel files to your main project directory
cp -a /tmp/laravel_temp_install/. /var/www/html/

# Restore Docker configuration files
cp -a /tmp/docker_backup/. /var/www/html/

# Go back to your project directory
cd /var/www/html

# Set proper permissions
chmod -R 775 storage bootstrap/cache

# Generate a key
php artisan key:generate
   ```

## Available Services

- **Laravel App**: PHP 8.3 with FPM
- **Web Server**: Nginx
- **Database**: MySQL 8.0
- **Cache & Queue**: Redis
- **Queue Worker**: Laravel Queue Worker
- **Database Management**: phpMyAdmin (optional, accessible at http://localhost:8080)

## Using the Makefile

The included Makefile provides shortcuts for common Docker and Laravel commands:

```bash
# Start containers
make up

# Stop containers
make down

# Access the app container shell
make bash

# Run migrations
make migrate

# Run tests
make test

# Clear Laravel cache
make cache-clear
```

## Configuration Notes

- The MySQL data is persisted in a Docker volume
- Redis data is persisted in a Docker volume
- The Nginx server is configured for optimal Laravel performance
- PHP is configured with optimized settings for Laravel
- Queue worker is configured to handle background jobs

## Production Considerations

For production environments:

1. Set `APP_ENV=production` and `APP_DEBUG=false` in `.env`
2. Configure proper SSL certificates in `docker/nginx/ssl/`
3. Set strong passwords for MySQL and Redis
4. Consider using a dedicated database server for high-traffic applications
5. Implement proper monitoring and logging

## Extending the Setup

This base setup can be extended with additional services as needed:

- Elasticsearch for improved search functionality
- Mailhog for local email testing
- Selenium for browser testing
